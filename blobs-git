#!/bin/sh
# -*- mode: shell-script; sh-indentation: 8; tab-width: 8 -*-
# $ blobs-git $
#
# Author: Tomi Ollila -- too Ã¤t iki piste fi
#
#	Copyright (c) 2017 Tomi Ollila
#	    All rights reserved
#
# Created: Sat 15 Apr 2017 12:07:45 EEST too
# Last modified: Wed 19 Apr 2017 18:25:22 +0300 too

# As Git, this software is distributed under the terms of the GNU GPL version 2
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html

# This script copies single files in and out of a (separate) git repository,
# i.e. providing one way to store and load large files in git.
# This script supports ssh, http, https, git and local file protocols.

case ~ in '~') echo "'~' does not expand. old /bin/sh?" >&2; exit 1; esac

case ${BASH_VERSION-} in *.*) set -o posix; shopt -s xpg_echo; esac
case ${ZSH_VERSION-} in *.*) emulate ksh; esac

set -u  # expanding unset variable makes non-interactive shell exit immediately
set -f  # disable pathname expansion by default
set -e  # exit on error -- know potential false negatives and positives !
#et -x  # s/#/s/ may help debugging  (or run /bin/sh -x ... on command line)

# LANG=C LC_ALL=C; export LANG LC_ALL; unset LANGUAGE
# LANG=en_IE.UTF-8 LC_ALL=en_IE.UTF-8; export LANG LC_ALL; unset LANGUAGE
# PATH='/sbin:/usr/sbin:/bin:/usr/bin'; export PATH

saved_IFS=$IFS; readonly saved_IFS

warn () { printf '%s\n' "$*"; } >&2
die () { printf '%s\n' "$*"; exit 1; } >&2

x () { printf '+ %s\n' "$*" >&2; "$@"; }
x_env () { printf '+ %s\n' "$*" >&2; env "$@"; }
x_eval () { printf '+ %s\n' "$*" >&2; eval "$*"; }
x_exec () { printf '+ %s\n' "$*" >&2; exec "$@"; die "exec '$*' failed"; }

usage ()
{
	exec >&2
	printf '\nUsage: %s %s %s\n' "$bn0" "$cmd" "$1"
	echo
	test $# -gt 1 || exit 1
	shift
	printf '%s\n' "$@"
	echo
	exit 1
}

http_get ()
{
	if command -v curl >/dev/null
	then http_get () {
		x curl -sS -L -A 'git/2.7.4' -H 'Connection: Close' "$@"
	}
	else http_get () {
		x wget -q -O - -U 'git/2.7.4' --no-http-keep-alive "$@"
	}
	fi
	http_get "$@"
}

get_remote ()
{
	suff=
	case $1 in *:*) remote=$1
		;; */*) test -d "$1" && remote=$1 ||
			remote=`x_exec git config --get remote.$1.url`
		;; *) remote=`x_exec git config --get remote.${1%-*}.url`
		      case $1 in *-*) suff=-${1##*-}; esac
	esac
	case $remote in *.git) rx=.git remote=${remote%.git} ;; *) rx= ;; esac
	remote=$remote$suff$rx
	printf '%s\n' "Blobs repository: $remote" >&2
}

_uwr () {
	usage "$1" \
	  "{repo} is either url, or resolved on current git repo" \
	  " examples: 'git@example.org:dotfiles' and 'origin[-blobs]'" \
	  ${2+''} ${2+"$2"}
}

set_tmpdir () {
	tmpdir=`exec mktemp -d "$1"/td.XXXXXX`
	trap 'rm -rf "$tmpdir"; trap - 0' 0 INT HUP TERM QUIT
}

cmd_pick () # get blobs from repository (by sha256-hash[+-]size...)
{
	test $# -gt 2 ||
		_uwr "{repo} {target-dir} {hash[+-]size} [hash[+-]size...]" \
		  "{target-dir} starting '%/' -- relative to current git repo"
	get_remote "$1"
	case $2 in %/*) trgdir=`exec git rev-parse --show-toplevel`${2#?}
		;; *) trgdir=$2
	esac
	test -d $trgdir || die "'$trgdir': no such directory"
	shift 2
	set_tmpdir "$trgdir"
	for fidn; do
		# todo, more checks.
		test ${#fidn} -ge 66 || {
			warn "$fidn: so short it cannot be right..."; continue
		}
		x git clone --depth=1 --single-branch --branch "$fidn" \
			"$remote" "$tmpdir"/git
		x mv "$tmpdir"/git/"$fidn" "$trgdir"
		rm -rf "$tmpdir"/git
	done
}

# content-addressable name
exec_ca_name ()
{
	# hmm, one may need to install Digest::SHA module
	exec perl -le 'use strict; use warnings; use Digest;
		open I, "<", $ARGV[0] or die "$ARGV[0]: ", $!;
		my $sha256 = Digest->new("SHA-256");
		$sha256->addfile(*I);
		close I;
		my $sep="-"; $sep="+" if $ARGV[1] == 755;
		print $sha256->hexdigest, $sep, -s $ARGV[0]'  "$1" "$2"
}

set_git_env_vars()
{
	GIT_AUTHOR_NAME='A B'; GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
	GIT_AUTHOR_EMAIL='a.b@c.de'; GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
	GIT_AUTHOR_DATE='1234567890 +0000'; GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE
	export GIT_AUTHOR_NAME  GIT_COMMITTER_NAME
	export GIT_AUTHOR_EMAIL GIT_COMMITTER_EMAIL
	export GIT_AUTHOR_DATE  GIT_COMMITTER_DATE
}

cmd_send () # put blobs to repository (by filename...)
{
	test $# -gt 1 || _uwr "{repo} [644|755] {file} [[644|755] file...]"
	get_remote "$1"; shift
	set_tmpdir "$PWD"
	for f
	do case $f in 644 | 755) continue; esac
	   test -f "$f" || die "'$f': no such file"
	done
	set_git_env_vars
	GIT_DIR=$tmpdir; export GIT_DIR
	git init --bare
	ec= mode=
	for f; do
		case $f in 644 | 755) mode=$f; continue; esac
		test "$mode" || { test -x "$f" && mode=755 || mode=644; }
		ca_name=`exec_ca_name "$f" $mode`
		blob=`exec git hash-object -w "$f"`
		git --git-dir "$tmpdir" update-index --add --cacheinfo \
			100$mode "$blob" $ca_name
		mode=
		tree=`exec git write-tree`
		commit=`exec git commit-tree -m vakio $tree`
		git push "$remote" "$commit:refs/heads/$ca_name" || ec=$ec.
		rm -rf "$GIT_DIR"/index "$GIT_DIR"/objects/??/*
	done
	if test "$ec"
	then die "${#ec} pushes failed"
	fi
}

cmd_list () # [--raw] list blobs in repository
{
	test "${1-}" = --raw && { filter=cat; shift; } ||
		filter='sed -n '\''/refs\/heads\/.\{66,\}/ s|.*/heads/| |p'\'
	test $# -gt 0 || _uwr '[--raw] {repo}'
	get_remote "$1"; shift
	git ls-remote "$remote" | eval $filter
}

cmd_make () # make new blobs repository (e.g. push readme to master)
{
	case ${1-} in --init-repo) init=true; shift ;; *) init=false ;; esac
	test $# -gt 0 || usage "[--init-repo] {repo}"
	set_tmpdir "$PWD"
	remote=$1
	case $remote in
		http*://* | git:*)
			if $init
			then die "Cannot init repository using this protocol"
			fi
		# xxx unify with cmd_list
		;; ssh://*)
			remote=${remote#ssh://} # drop ssh:// prefix
			host=${remote%%/*} remote=${remote#*/}
			case $remote in '~/'*) remote=${remote#??}
					;; *) remote=/$remote
			esac
			case $host in *:*) host="-p ${host#*:} ${host%%:*}"
			esac
			case $remote in *.git) ;; *) remote=$remote.git ;; esac
			if $init
			then ssh $host "mkdir '$remote'
			    git -C '$remote' init --bare --template=/dev/null"
			fi
		;; *:*) # ssh#2
			host=${remote%%:*} remote=${remote#*:}
			case $remote in *.git) ;; *) remote=$remote.git ;; esac
			if $init
			then ssh $host "mkdir '$remote'
			    git -C '$remote' init --bare --template=/dev/null"
			fi
		;; *) # file
			case $remote in *.git) ;; *) remote=$remote.git ;; esac
			mkdir "$remote"
			if $init
			then git -C "$remote" init --bare --template=/dev/null
			fi
	esac
	set_git_env_vars
	(cd "$tmpdir" && exec git init --template=/dev/null)
	printf > "$tmpdir"/README %s\\n '' \
	      'Binary Large OBJect storage in Git repository' \
	      '=============================================' '' \
	      'Every blob is in its own branch, named by the' \
	      'content-addressable name {sha-256[+-]size} of' \
	      "the file stored there. The tool 'blobs-git'" \
	      'is used to access these files.' '' \
	      'If you cloned this repository, you now have' \
	      'backup if it -- congratulations."' ''

	(cd "$tmpdir" && git add README && git commit -m vakio)
	git --git-dir $tmpdir/.git push "$remote" HEAD:master
}


unset setx
case ${1-} in -x) setx=t; shift # hint: PS4='$LINENO: ' me -x .. helps further
esac

bn0=${0##*/}

if test $# = 0
then	echo
	echo Usage: $bn0 '[-x] <command> [args]'
	echo
	echo $bn0 commands available:
	echo
	sed -n '/^cmd_[a-z0-9_]/ { s/cmd_/ /; s/ () [ #]*/                   /
		s/$0/'"$bn0"'/g; s/\(.\{13\}\) */\1/p; }' "$0"
	echo
	echo Command can be abbreviated to any unambiguous prefix.
	echo
	exit 0
fi

cm=$1; shift

# case $cm in
#	x) cm=exec ;;
# esac

cc= cp=
for m in `LC_ALL=C exec sed -n 's/^cmd_\([a-z0-9_]*\) (.*/\1/p' "$0"`
do
	case $m in
		$cm) cp= cc=1 cmd=$cm; break ;;
		$cm*) cp=$cc; cc="$m $cc"; cmd=$m ;;
	esac
done

case $cc in '') echo $bn0: $cm -- no such $bn0 command.; exit 1
esac
case $cp in '') ;; *) echo $bn0: $cm -- ambiguous command: matches $cc; exit 1
esac

unset cc cp cm
case ${setx-} in t) unset setx; set -x
esac
cmd_$cmd "$@"
exit
